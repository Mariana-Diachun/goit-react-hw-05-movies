{"version":3,"file":"static/js/344.30fd026d.chunk.js","mappings":"8PAEaA,EAAMC,EAAAA,GAAAA,IAAH,0CAGHC,EAAOD,EAAAA,GAAAA,KAAH,sBAEJE,EAAQF,EAAAA,GAAAA,MAAH,yMAYLG,EAASH,EAAAA,GAAAA,OAAH,gV,SCmCnB,MA5CA,YAAkC,IAAbI,EAAY,EAAZA,SAEnB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAsBA,OACE,SAACR,EAAD,WACE,UAACE,EAAD,CAAMG,SAlBV,SAAsBI,GACpBA,EAAMC,iBAEQ,KAAVH,GAIJF,EAASE,GACTC,EAAS,KAJPG,MAAM,sBAUT,EAIG,WACE,SAACR,EAAD,CACES,KAAK,OACLC,KAAK,QACLN,MAAOA,EACPO,SA3BiB,SAAAL,GACvBD,EAASC,EAAMM,cAAcC,MAAMC,cACpC,EA0BOC,aAAa,SAEf,SAACd,EAAD,CAAQQ,KAAK,SAAb,6BAIP,E,iBC9CDO,EAAAA,GAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAiB,mCAAG,WAAMb,GAAN,gGAENY,EAAAA,GAAAA,IAAA,qFACyDZ,EADzD,gCAFM,cAEvBc,EAFuB,yBAKtBA,EAASC,MALa,gCAO7BC,QAAQC,IAAI,KAAMC,SAPW,yDAAH,sD,SC4B9B,EA7B2B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACtBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,0BACE,wBACGF,EAAMG,KAAI,YAAoB,IAAjBC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MAChB,OACE,yBACE,SAAC,KAAD,CAAMC,MAAO,CAAEC,KAAMN,GAAYO,GAAE,kBAAaJ,GAAhD,SACGC,KAFID,EAMZ,OAIR,ECiBD,EAhCe,WACb,OAAuCxB,EAAAA,EAAAA,UAAS,IAAhD,eAAO6B,EAAP,KAAoBC,EAApB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMhC,EAAQ+B,EAAaE,IAAI,UAE/BC,EAAAA,EAAAA,YAAU,WACR,GAAIlC,EAAO,CACT,IAAMmC,EAAiB,mCAAG,6GAEHtB,EAAkBb,GAFf,OAEhBe,EAFgB,OAGtBc,EAAgBd,EAAKqB,SAHC,gDAKtBpB,QAAQqB,MAAR,MALsB,yDAAH,qDAQvBF,GACD,CAEF,GAAE,CAACnC,IAMJ,OACE,4BACE,SAAC,EAAD,CAAWF,SANU,SAAAwC,GACvBN,EAAgB,CAAEhC,MAAOsC,GAC1B,KAKG,SAAC,EAAD,CAAoBnB,MAAOS,MAGhC,C","sources":["components/SearchBar/SearchBar.styled.js","components/SearchBar/SearchBar.jsx","services/getMoviesBySearch.js","components/MoviesListBySearch/MoviesListBySearch.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Box = styled.div`\n  display: flex;\n`;\nexport const Form = styled.form``;\n\nexport const Input = styled.input`\n  box-sizing: border-box;\n  width: 220px;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  outline: none;\n  &:hover,\n  &:focus {\n    border-color: red;\n  }\n  padding: 5px;\n`;\n\nexport const Button = styled.button`\n  border: none;\n  margin-top: 30px;\n  margin-left: 10px;\n  font-weight: 500;\n  font-size: 12px;\n  line-height: 1.88;\n  letter-spacing: 0.06em;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  border-radius: 4px;\n  &:hover,\n  &:focus {\n    border-color: red;\n  }\n  cursor: pointer;\n  width: 100px;\n`;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\n// import { useSearchParams } from 'react-router-dom';\nimport {\n  Input,\n  Button,\n  Box,\n  Form,\n} from 'components/SearchBar/SearchBar.styled';\n\nfunction SearchBar({ onSubmit }) {\n  // const [searchParams, setSearchParams] = useSearchParams();\n  const [query, setQuery] = useState('');\n\n  const handleNameChange = event => {\n    setQuery(event.currentTarget.value.toLowerCase());\n  };\n\n  function handleSubmit(event) {\n    event.preventDefault();\n\n    if (query === '') {\n      alert('Please enter a word');\n      return;\n    }\n    onSubmit(query);\n    setQuery('');\n    // const newQuery = event.currentTarget.elements.query.value;\n    // setQuery(newQuery);\n    // setSearchParams({ query: newQuery });\n    // onSubmit(newQuery);\n    // setQuery('');\n  }\n\n  return (\n    <Box>\n      <Form onSubmit={handleSubmit}>\n        <Input\n          type=\"text\"\n          name=\"query\"\n          query={query}\n          onChange={handleNameChange}\n          autoComplete=\"off\"\n        />\n        <Button type=\"submit\">Search film</Button>\n      </Form>\n    </Box>\n  );\n}\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default SearchBar;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const getMoviesBySearch = async query => {\n  try {\n    const response = await axios.get(\n      `search/movie?api_key=ae750ece0804f05464dc1609a148e97e&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst MoviesListBySearch = ({ films }) => {\n  const location = useLocation();\n\n  return (\n    <div>\n      <ul>\n        {films.map(({ id, title }) => {\n          return (\n            <li key={id}>\n              <Link state={{ from: location }} to={`/movies/${id}`}>\n                {title}\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nMoviesListBySearch.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string,\n    })\n  ),\n};\n\nexport default MoviesListBySearch;\n","import { useState, useEffect } from 'react';\nimport SearchBar from 'components/SearchBar/SearchBar';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMoviesBySearch } from 'services/getMoviesBySearch';\nimport MoviesListBySearch from 'components/MoviesListBySearch/MoviesListBySearch';\n\nconst Movies = () => {\n  const [searchFilms, setSearchMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (query) {\n      const fetchSearchMovies = async () => {\n        try {\n          const data = await getMoviesBySearch(query);\n          setSearchMovies(data.results);\n        } catch (error) {\n          console.error(error);\n        }\n      };\n      fetchSearchMovies();\n    }\n    return;\n  }, [query]);\n\n  const handleFormSubmit = q => {\n    setSearchParams({ query: q });\n  };\n\n  return (\n    <div>\n      <SearchBar onSubmit={handleFormSubmit} />\n      <MoviesListBySearch films={searchFilms} />\n    </div>\n  );\n};\nexport default Movies;\n"],"names":["Box","styled","Form","Input","Button","onSubmit","useState","query","setQuery","event","preventDefault","alert","type","name","onChange","currentTarget","value","toLowerCase","autoComplete","axios","getMoviesBySearch","response","data","console","log","message","films","location","useLocation","map","id","title","state","from","to","searchFilms","setSearchMovies","useSearchParams","searchParams","setSearchParams","get","useEffect","fetchSearchMovies","results","error","q"],"sourceRoot":""}